// Code generated by go generate; DO NOT EDIT.
package aws

import (
	"context"

	"github.com/dop251/goja"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
)

type EventBridgeClient struct {
	*AWS
	sdk *eventbridge.Client
}

func (a *AWS) newEventBridgeClient(call goja.ConstructorCall) *goja.Object {
	awsCfg := a.constructorCallToConfig("EventBridgeClient", call)

	sdk := eventbridge.NewFromConfig(awsCfg)

	client := &EventBridgeClient{
		AWS: a,
		sdk: sdk,
	}

	return a.vu.Runtime().ToValue(client).ToObject(a.vu.Runtime())
}


func (c *EventBridgeClient) ActivateEventSource(obj *goja.Object,) goja.Value {
	in := &eventbridge.ActivateEventSourceInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ActivateEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) CancelReplay(obj *goja.Object,) goja.Value {
	in := &eventbridge.CancelReplayInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.CancelReplay(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) CreateApiDestination(obj *goja.Object,) goja.Value {
	in := &eventbridge.CreateApiDestinationInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.CreateApiDestination(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) CreateArchive(obj *goja.Object,) goja.Value {
	in := &eventbridge.CreateArchiveInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.CreateArchive(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) CreateConnection(obj *goja.Object,) goja.Value {
	in := &eventbridge.CreateConnectionInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.CreateConnection(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) CreateEndpoint(obj *goja.Object,) goja.Value {
	in := &eventbridge.CreateEndpointInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.CreateEndpoint(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) CreateEventBus(obj *goja.Object,) goja.Value {
	in := &eventbridge.CreateEventBusInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.CreateEventBus(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) CreatePartnerEventSource(obj *goja.Object,) goja.Value {
	in := &eventbridge.CreatePartnerEventSourceInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.CreatePartnerEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DeactivateEventSource(obj *goja.Object,) goja.Value {
	in := &eventbridge.DeactivateEventSourceInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DeactivateEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DeauthorizeConnection(obj *goja.Object,) goja.Value {
	in := &eventbridge.DeauthorizeConnectionInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DeauthorizeConnection(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DeleteApiDestination(obj *goja.Object,) goja.Value {
	in := &eventbridge.DeleteApiDestinationInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DeleteApiDestination(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DeleteArchive(obj *goja.Object,) goja.Value {
	in := &eventbridge.DeleteArchiveInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DeleteArchive(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DeleteConnection(obj *goja.Object,) goja.Value {
	in := &eventbridge.DeleteConnectionInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DeleteConnection(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DeleteEndpoint(obj *goja.Object,) goja.Value {
	in := &eventbridge.DeleteEndpointInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DeleteEndpoint(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DeleteEventBus(obj *goja.Object,) goja.Value {
	in := &eventbridge.DeleteEventBusInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DeleteEventBus(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DeletePartnerEventSource(obj *goja.Object,) goja.Value {
	in := &eventbridge.DeletePartnerEventSourceInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DeletePartnerEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DeleteRule(obj *goja.Object,) goja.Value {
	in := &eventbridge.DeleteRuleInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DeleteRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DescribeApiDestination(obj *goja.Object,) goja.Value {
	in := &eventbridge.DescribeApiDestinationInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DescribeApiDestination(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DescribeArchive(obj *goja.Object,) goja.Value {
	in := &eventbridge.DescribeArchiveInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DescribeArchive(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DescribeConnection(obj *goja.Object,) goja.Value {
	in := &eventbridge.DescribeConnectionInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DescribeConnection(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DescribeEndpoint(obj *goja.Object,) goja.Value {
	in := &eventbridge.DescribeEndpointInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DescribeEndpoint(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DescribeEventBus(obj *goja.Object,) goja.Value {
	in := &eventbridge.DescribeEventBusInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DescribeEventBus(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DescribeEventSource(obj *goja.Object,) goja.Value {
	in := &eventbridge.DescribeEventSourceInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DescribeEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DescribePartnerEventSource(obj *goja.Object,) goja.Value {
	in := &eventbridge.DescribePartnerEventSourceInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DescribePartnerEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DescribeReplay(obj *goja.Object,) goja.Value {
	in := &eventbridge.DescribeReplayInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DescribeReplay(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DescribeRule(obj *goja.Object,) goja.Value {
	in := &eventbridge.DescribeRuleInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DescribeRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) DisableRule(obj *goja.Object,) goja.Value {
	in := &eventbridge.DisableRuleInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.DisableRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) EnableRule(obj *goja.Object,) goja.Value {
	in := &eventbridge.EnableRuleInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.EnableRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListApiDestinations(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListApiDestinationsInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListApiDestinations(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListArchives(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListArchivesInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListArchives(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListConnections(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListConnectionsInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListConnections(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListEndpoints(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListEndpointsInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListEndpoints(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListEventBuses(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListEventBusesInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListEventBuses(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListEventSources(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListEventSourcesInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListEventSources(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListPartnerEventSourceAccounts(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListPartnerEventSourceAccountsInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListPartnerEventSourceAccounts(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListPartnerEventSources(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListPartnerEventSourcesInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListPartnerEventSources(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListReplays(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListReplaysInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListReplays(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListRuleNamesByTarget(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListRuleNamesByTargetInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListRuleNamesByTarget(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListRules(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListRulesInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListRules(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListTagsForResource(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListTagsForResourceInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListTagsForResource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) ListTargetsByRule(obj *goja.Object,) goja.Value {
	in := &eventbridge.ListTargetsByRuleInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.ListTargetsByRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) PutEvents(obj *goja.Object,) goja.Value {
	in := &eventbridge.PutEventsInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.PutEvents(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) PutPartnerEvents(obj *goja.Object,) goja.Value {
	in := &eventbridge.PutPartnerEventsInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.PutPartnerEvents(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) PutPermission(obj *goja.Object,) goja.Value {
	in := &eventbridge.PutPermissionInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.PutPermission(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) PutRule(obj *goja.Object,) goja.Value {
	in := &eventbridge.PutRuleInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.PutRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) PutTargets(obj *goja.Object,) goja.Value {
	in := &eventbridge.PutTargetsInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.PutTargets(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) RemovePermission(obj *goja.Object,) goja.Value {
	in := &eventbridge.RemovePermissionInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.RemovePermission(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) RemoveTargets(obj *goja.Object,) goja.Value {
	in := &eventbridge.RemoveTargetsInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.RemoveTargets(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) StartReplay(obj *goja.Object,) goja.Value {
	in := &eventbridge.StartReplayInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.StartReplay(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) TagResource(obj *goja.Object,) goja.Value {
	in := &eventbridge.TagResourceInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.TagResource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) TestEventPattern(obj *goja.Object,) goja.Value {
	in := &eventbridge.TestEventPatternInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.TestEventPattern(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) UntagResource(obj *goja.Object,) goja.Value {
	in := &eventbridge.UntagResourceInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.UntagResource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) UpdateApiDestination(obj *goja.Object,) goja.Value {
	in := &eventbridge.UpdateApiDestinationInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.UpdateApiDestination(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) UpdateArchive(obj *goja.Object,) goja.Value {
	in := &eventbridge.UpdateArchiveInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.UpdateArchive(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) UpdateConnection(obj *goja.Object,) goja.Value {
	in := &eventbridge.UpdateConnectionInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.UpdateConnection(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) UpdateEndpoint(obj *goja.Object,) goja.Value {
	in := &eventbridge.UpdateEndpointInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.UpdateEndpoint(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

func (c *EventBridgeClient) UpdateEventBus(obj *goja.Object,) goja.Value {
	in := &eventbridge.UpdateEventBusInput{}
	if err := fromGojaObject(c.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := c.sdk.UpdateEventBus(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return c.vu.Runtime().ToValue(out)
}

