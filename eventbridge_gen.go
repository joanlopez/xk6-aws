// Code generated by go generate; DO NOT EDIT.
package aws

import (
	"context"

	"github.com/dop251/goja"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
)


func (a *AWS) ActivateEventSource(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ActivateEventSourceInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ActivateEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) CancelReplay(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.CancelReplayInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).CancelReplay(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) CreateApiDestination(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.CreateApiDestinationInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).CreateApiDestination(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) CreateArchive(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.CreateArchiveInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).CreateArchive(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) CreateConnection(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.CreateConnectionInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).CreateConnection(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) CreateEndpoint(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.CreateEndpointInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).CreateEndpoint(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) CreateEventBus(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.CreateEventBusInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).CreateEventBus(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) CreatePartnerEventSource(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.CreatePartnerEventSourceInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).CreatePartnerEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DeactivateEventSource(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DeactivateEventSourceInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DeactivateEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DeauthorizeConnection(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DeauthorizeConnectionInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DeauthorizeConnection(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DeleteApiDestination(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DeleteApiDestinationInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DeleteApiDestination(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DeleteArchive(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DeleteArchiveInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DeleteArchive(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DeleteConnection(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DeleteConnectionInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DeleteConnection(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DeleteEndpoint(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DeleteEndpointInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DeleteEndpoint(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DeleteEventBus(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DeleteEventBusInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DeleteEventBus(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DeletePartnerEventSource(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DeletePartnerEventSourceInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DeletePartnerEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DeleteRule(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DeleteRuleInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DeleteRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DescribeApiDestination(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DescribeApiDestinationInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DescribeApiDestination(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DescribeArchive(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DescribeArchiveInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DescribeArchive(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DescribeConnection(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DescribeConnectionInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DescribeConnection(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DescribeEndpoint(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DescribeEndpointInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DescribeEndpoint(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DescribeEventBus(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DescribeEventBusInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DescribeEventBus(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DescribeEventSource(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DescribeEventSourceInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DescribeEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DescribePartnerEventSource(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DescribePartnerEventSourceInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DescribePartnerEventSource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DescribeReplay(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DescribeReplayInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DescribeReplay(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DescribeRule(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DescribeRuleInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DescribeRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) DisableRule(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.DisableRuleInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).DisableRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) EnableRule(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.EnableRuleInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).EnableRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListApiDestinations(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListApiDestinationsInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListApiDestinations(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListArchives(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListArchivesInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListArchives(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListConnections(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListConnectionsInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListConnections(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListEndpoints(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListEndpointsInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListEndpoints(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListEventBuses(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListEventBusesInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListEventBuses(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListEventSources(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListEventSourcesInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListEventSources(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListPartnerEventSourceAccounts(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListPartnerEventSourceAccountsInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListPartnerEventSourceAccounts(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListPartnerEventSources(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListPartnerEventSourcesInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListPartnerEventSources(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListReplays(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListReplaysInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListReplays(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListRuleNamesByTarget(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListRuleNamesByTargetInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListRuleNamesByTarget(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListRules(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListRulesInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListRules(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListTagsForResource(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListTagsForResourceInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListTagsForResource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) ListTargetsByRule(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.ListTargetsByRuleInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).ListTargetsByRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) PutEvents(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.PutEventsInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).PutEvents(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) PutPartnerEvents(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.PutPartnerEventsInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).PutPartnerEvents(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) PutPermission(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.PutPermissionInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).PutPermission(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) PutRule(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.PutRuleInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).PutRule(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) PutTargets(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.PutTargetsInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).PutTargets(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) RemovePermission(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.RemovePermissionInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).RemovePermission(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) RemoveTargets(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.RemoveTargetsInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).RemoveTargets(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) StartReplay(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.StartReplayInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).StartReplay(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) TagResource(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.TagResourceInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).TagResource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) TestEventPattern(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.TestEventPatternInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).TestEventPattern(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) UntagResource(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.UntagResourceInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).UntagResource(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) UpdateApiDestination(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.UpdateApiDestinationInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).UpdateApiDestination(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) UpdateArchive(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.UpdateArchiveInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).UpdateArchive(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) UpdateConnection(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.UpdateConnectionInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).UpdateConnection(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) UpdateEndpoint(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.UpdateEndpointInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).UpdateEndpoint(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

func (a *AWS) UpdateEventBus(obj *goja.Object,) goja.Value {
	cfg, err := defaultConfig(context.TODO())
	if err != nil {
		panic(err)
	}

	in := &eventbridge.UpdateEventBusInput{}
	if err := fromGojaObject(a.vu.Runtime(), obj, in); err != nil {
		panic(err)
	}

	out, err := eventbridge.NewFromConfig(cfg).UpdateEventBus(context.Background(), in, )
    if err != nil {
		panic(err)
	}

	return a.vu.Runtime().ToValue(out)
}

